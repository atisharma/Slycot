!    -*- f90 -*-
! Note: the context of this file is case sensitive.
!
! The 'intent(xyz)' signatures have been added manually
! based on the slicot function documentation
!
! A Sharma (2022)

!
! calculation of dimension of dwork is a bit hacky
!
subroutine ib01ad(meth,alg,jobd,batch,conct,ctrl,nobr,m,l,nsmp,u,ldu,y,ldy,n,r,ldr,sv,rcond,tol,iwork,dwork,ldwork,iwarn,info) ! in /src/SLICOT-Reference/src/IB01AD.f
    character intent(in) :: meth
    character intent(in) :: alg
    character intent(in) :: jobd
    character intent(in) :: batch
    character intent(in) :: conct
    character intent(in) :: ctrl
    integer intent(in) :: nobr
    integer intent(hide),depend(u) :: m=shape(u, 1)
    integer intent(hide),depend(y) :: l=shape(y, 1)
    integer intent(hide),depend(u,y) :: nsmp=min(shape(u, 0),shape(y,0))
    double precision intent(in),dimension(ldu,m) :: u
    integer intent(hide),check(shape(u, 0) == ldu),depend(u) :: ldu=shape(u, 0)
    double precision intent(in),dimension(ldy,l) :: y
    integer intent(hide),check(shape(y, 0) == ldy),depend(y) :: ldy=shape(y, 0)
    integer intent(out) :: n
    double precision intent(in,out,copy),dimension(ldr,2*(m+l)*nobr),depend(m,l,nobr) :: r
    integer intent(hide),optional,check(shape(r, 0)==ldr),depend(r) :: ldr=shape(r, 0)
    double precision intent(out),dimension(l*nobr),depend(l,nobr) :: sv
    double precision intent(in) :: rcond
    double precision intent(in) :: tol
    integer intent(hide,cache),dimension((m+l)*nobr),depend(m,l,nobr) :: iwork
    double precision intent(hide,cache),dimension( max( (m+l)*4*nobr*(m+l+1)+(m+l)*2*nobr, 4*(nobr+1)*(m+l)*nobr ) ),depend(m,l,nobr) :: dwork
    integer intent(hide),depend(dwork) :: ldwork=shape(dwork,0)
    integer intent(out) :: iwarn
    integer intent(out) :: info
end subroutine ib01ad

subroutine ib01bd(meth,job,jobck,nobr,n,m,l,nsmpl,r,ldr,a,lda,c,ldc,b,ldb,d,ldd,q,ldq,ry,ldry,s,lds,k,ldk,tol,iwork,dwork,ldwork,bwork,iwarn,info) ! in /src/SLICOT-Reference/src/IB01BD.f
    character :: meth
    character :: job
    character :: jobck
    integer :: nobr
    integer :: n
    integer :: m
    integer :: l
    integer :: nsmpl
    double precision dimension(ldr,*) :: r
    integer, optional,check(shape(r, 0) == ldr),depend(r) :: ldr=shape(r, 0)
    double precision dimension(lda,*) :: a
    integer, optional,check(shape(a, 0) == lda),depend(a) :: lda=shape(a, 0)
    double precision dimension(ldc,*) :: c
    integer, optional,check(shape(c, 0) == ldc),depend(c) :: ldc=shape(c, 0)
    double precision dimension(ldb,*) :: b
    integer, optional,check(shape(b, 0) == ldb),depend(b) :: ldb=shape(b, 0)
    double precision dimension(ldd,*) :: d
    integer, optional,check(shape(d, 0) == ldd),depend(d) :: ldd=shape(d, 0)
    double precision dimension(ldq,*) :: q
    integer, optional,check(shape(q, 0) == ldq),depend(q) :: ldq=shape(q, 0)
    double precision dimension(ldry,*) :: ry
    integer, optional,check(shape(ry, 0) == ldry),depend(ry) :: ldry=shape(ry, 0)
    double precision dimension(lds,*) :: s
    integer, optional,check(shape(s, 0) == lds),depend(s) :: lds=shape(s, 0)
    double precision dimension(ldk,*) :: k
    integer, optional,check(shape(k, 0) == ldk),depend(k) :: ldk=shape(k, 0)
    double precision :: tol
    integer dimension(*) :: iwork
    double precision dimension(*) :: dwork
    integer :: ldwork
    logical dimension(*) :: bwork
    integer :: iwarn
    integer :: info
end subroutine ib01bd

subroutine ib01cd(jobx0,comuse,job,n,m,l,nsmp,a,lda,b,ldb,c,ldc,d,ldd,u,ldu,y,ldy,x0,v,ldv,tol,iwork,dwork,ldwork,iwarn,info) ! in /src/SLICOT-Reference/src/IB01CD.f
    character :: jobx0
    character :: comuse
    character :: job
    integer :: n
    integer :: m
    integer :: l
    integer :: nsmp
    double precision dimension(lda,*) :: a
    integer, optional,check(shape(a, 0) == lda),depend(a) :: lda=shape(a, 0)
    double precision dimension(ldb,*) :: b
    integer, optional,check(shape(b, 0) == ldb),depend(b) :: ldb=shape(b, 0)
    double precision dimension(ldc,*) :: c
    integer, optional,check(shape(c, 0) == ldc),depend(c) :: ldc=shape(c, 0)
    double precision dimension(ldd,*) :: d
    integer, optional,check(shape(d, 0) == ldd),depend(d) :: ldd=shape(d, 0)
    double precision dimension(ldu,*) :: u
    integer, optional,check(shape(u, 0) == ldu),depend(u) :: ldu=shape(u, 0)
    double precision dimension(ldy,*) :: y
    integer, optional,check(shape(y, 0) == ldy),depend(y) :: ldy=shape(y, 0)
    double precision dimension(*) :: x0
    double precision dimension(ldv,*) :: v
    integer, optional,check(shape(v, 0) == ldv),depend(v) :: ldv=shape(v, 0)
    double precision :: tol
    integer dimension(*) :: iwork
    double precision dimension(*) :: dwork
    integer :: ldwork
    integer :: iwarn
    integer :: info
end subroutine ib01cd

subroutine ib03ad(init,alg,stor,nobr,m,l,nsmp,n,nn,itmax1,itmax2,nprint,u,ldu,y,ldy,x,lx,tol1,tol2,iwork,dwork,ldwork,iwarn,info) ! in /src/SLICOT-Reference/src/IB03AD.f
    character :: init
    character :: alg
    character :: stor
    integer :: nobr
    integer :: m
    integer :: l
    integer :: nsmp
    integer :: n
    integer :: nn
    integer :: itmax1
    integer :: itmax2
    integer :: nprint
    double precision dimension(ldu,*) :: u
    integer, optional,check(shape(u, 0) == ldu),depend(u) :: ldu=shape(u, 0)
    double precision dimension(ldy,*) :: y
    integer, optional,check(shape(y, 0) == ldy),depend(y) :: ldy=shape(y, 0)
    double precision dimension(*) :: x
    integer :: lx
    double precision :: tol1
    double precision :: tol2
    integer dimension(*) :: iwork
    double precision dimension(*) :: dwork
    integer :: ldwork
    integer :: iwarn
    integer :: info
end subroutine ib03ad

subroutine ib03bd(init,nobr,m,l,nsmp,n,nn,itmax1,itmax2,nprint,u,ldu,y,ldy,x,lx,tol1,tol2,iwork,dwork,ldwork,iwarn,info) ! in /src/SLICOT-Reference/src/IB03BD.f
    character :: init
    integer :: nobr
    integer :: m
    integer :: l
    integer :: nsmp
    integer :: n
    integer :: nn
    integer :: itmax1
    integer :: itmax2
    integer :: nprint
    double precision dimension(ldu,*) :: u
    integer, optional,check(shape(u, 0) == ldu),depend(u) :: ldu=shape(u, 0)
    double precision dimension(ldy,*) :: y
    integer, optional,check(shape(y, 0) == ldy),depend(y) :: ldy=shape(y, 0)
    double precision dimension(*) :: x
    integer :: lx
    double precision :: tol1
    double precision :: tol2
    integer dimension(*) :: iwork
    double precision dimension(*) :: dwork
    integer :: ldwork
    integer :: iwarn
    integer :: info
end subroutine ib03bd
